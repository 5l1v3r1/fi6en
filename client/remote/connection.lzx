<library>		
	<!--server connection initialization class-->
	<class name="connection" extends="rtmpconnection">
		<switch>
			<when property="$as3">
				<passthrough>
                        import flash.net.NetConnection;
                        import flash.net.Responder;
                        import flash.events.ErrorEvent;
                        import flash.events.StatusEvent;
                        import flash.events.IOErrorEvent;
                        import flash.events.NetStatusEvent;
                        import flash.events.SecurityErrorEvent;
                        import flash.events.AsyncErrorEvent;
				</passthrough>
			</when>
		</switch>
		<attribute name="connected" type="boolean" value="false"/>
		<attribute name="responder" /><!--responder for the server side-->
		
		<attribute name="type" type="text"/>
		<attribute name="host" type="text"/>
		<attribute name="port" type="text"/>
		<attribute name="webapprootkey" type="text"/>
		<attribute name="httpport" type="text"/>
				
		<handler name="onstage" reference="this">
			switch (this.stage) {
				case 0 : 
					Debug.info("Disconnected server application.");
					break;
				case 1 : 
					Debug.info("Connecting to the server application...");
					notificationWindow.addMessage("info","Connecting to the server application...");
					break;
				case 2 : 
					Debug.info("Server connection attempt succeeded.");
					notificationWindow.addMessage("info","Server connection attempt succeeded.");
					this.setAttribute('connected',true);
					break;
			}
			/*if (this.stage == 2) {
				Debug.info("The connection attempt succeeded.");
			}*/
		</handler>
		
		<!--here is handling the flash.Net.NetConnection object and creating the NetStream objects-->
		<!--<method name="netStatusHandler" args="event">
			switch (event.info.code) {
				case "NetConnection.Connect.Success" :
					Debug.info("The connection attempt succeeded.");
					responder = new Responder(this.responderResult,
							this.responderStatus);
					this.setAttribute("connected", true);
					//Debug.info("connected ? : %w",this.connected);
					break;

				case "NetConnection.Connect.Failed" :
					Debug.info("The connection attempt failed.");
					break;

				case "NetConnection.Connect.Closed" :
					Debug.info("Disconnected server application.");
					chatScreen.soChat.send("writeInfo", loginScreen
									.getUsername()
									+ " logged out");
					chatScreen.soUsers.send("removeFromUserlist", loginScreen
									.getUsername());
					this.closeConnection();
					break;

				case "NetConnection.Connect.Rejected" :
					Debug
							.info("The connection attempt did not have permission to access the application.");
					break;
				case "NetConnection.Connect.AppShutdown" :
					Debug.info("Application is shutting down..");
					break;

			}
		</method>-->
		
		<!--closing the netconnection and shared objects-->
		<method name="closeConnection">
			//_conn.call("deleteUsername",responder,loginScreen.getUsername());
			Debug.info("closing connection");
			chatScreen.soChat.close();
			chatScreen.soUsers.close();
			roomScreen.soChatRoom.close();
			roomScreen.soUsersRoom.close();
			this._nc.close();
		</method>
		
		<!--handler for the errors-->
		<method name="errorHandler" args="error">
			Debug.write(error.error);
		</method>
		
		<method name="responderResult" args="returnvalue">
			Debug.write("onResult:" + returnvalue);
		</method>
		
		<method name="responderStatus" args="returnvalue">
			Debug.write("onStatus:" + returnvalue.toString);
		</method>
		
		<!--<method name="callRemoteFunction" args="func, obj, params">
				<![CDATA[
				//Debug.write("*#* call: func, obj, params",func,obj, typeof (params) , params.length);
				if (params.length != 0) {

					//Debug.write("params:",params);
					//Debug.write("arguments:",arg);

					if (params.length==1){
						this._conn.call(func, obj,params[0]);
						Debug.info("called function : %w, parameter : %w",func, params[0]);
					} else if (params.length==2){
						this._conn.call(func, obj,params[0],params[1]);
						Debug.info("called function : %w, parameter : %w %w",func, params[0],params[1]);
					} else if (params.length==3){
						this._conn.call(func, obj,params[0],params[1],params[2]);
					} else if (params.length==4 ){
						this._conn.call(func, obj,params[0],params[1],params[2],params[3]);
					} 

				} //else {	   
				  //    Debug.write("this._nc.connected", this.connected);
				  //    this._conn.call(func, obj);
				//}
			]]>
			</method> -->    
	    
		<!--method sets welcome message with the incoming firstname and lastname-->
		<method name="setWelcomeMessage" args="firstname, lastname"><![CDATA[
			welcome.addText("<b><font>" + ' ' + firstname + ' ' + lastname
					+ "</font></b>");
		]]>
		</method>
	</class>	
</library>