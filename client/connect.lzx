<library>
	<include href="sharedObject.lzx" />
	<include href="chatView.lzx"/>
	
	<!--server connection initialization class-->
	<class name="connect" extends="node" oninit="initConnection()">
	 <!--<class name="connect" extends="node">-->
		<!--for swf10 runtime-->
		<switch>
			<when property="$as3">
				<passthrough>
					import flash.net.*;
					import flash.events.*;
					import flash.media.Camera;
					import flash.media.Microphone;
				</passthrough>
			</when>
		</switch>			
		
		<attribute name="_conn"/>
		<attribute name="_sharedObject"/>
		<attribute name="_sharedObjectUserlist"/>
		
		<attribute name="stream1" /> <!--stream for the publish-->
		<attribute name="stream2" /> <!--stream for the play-->

		<attribute name="responder" /><!--responder for the server side-->
		
		<method name="initConnection" ><![CDATA[	
			//creating rtmpconnection and shared object 
			_conn = new NetConnection();			
			_conn.connect("rtmp://127.0.0.1/Red5WebApplication");
			_conn.client=this;
			_sharedObject= new lz.sharedObject();
			_sharedObjectUserlist= new lz.sharedObject();
			/*add the listeners according to the runtime */	
			if ($swf8) {
				Debug.write("as2 env.");
				_conn.onStatus= function (info) {
					if (info.code=="NetConnection.Connect.Success") {
						Debug.write("The connection attempt succeeded.");
					}
				}
			}			
			
			else {
				Debug.write("as3 env.");
				_conn.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				_conn.addEventListener(AsyncErrorEvent.ASYNC_ERROR, errorHandler);
			}
			_sharedObject.connect("chat", _conn, true);
			_sharedObjectUserlist.connect("userlist", _conn, true);
		]]></method>
		
		<!--here is handling the flash.Net.NetConnection object and creating the NetStream objects-->
		<method name="netStatusHandler" args="event">
			switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    Debug.write("The connection attempt succeeded.");
                    stream1= new NetStream(_conn);
                    stream2= new NetStream(_conn);
                    responder = new Responder(this.onResult, this.onStatus);             
                    stream1.addEventListener(NetStatusEvent.NET_STATUS, netStreamHandler);
                    stream2.addEventListener(NetStatusEvent.NET_STATUS, netStreamHandler);
                    break;
                 
                case "NetConnection.Connect.Failed":
                	Debug.write("The connection attempt failed.");
                    break;
                
                case "NetConnection.Connect.Closed":
                	Debug.write("Disconnected successfully." );
                	break;
                	
                case "NetConnection.Connect.Rejected":
                    Debug.write("The connection attempt did not have permission to access the application.");
                    break;
                case "NetConnection.Connect.AppShutdown":
                	Debug.write("Application is shutting down." );
                	break;
                	
                }
		</method>
		<!--here is handling the flash.Net.NetStream object's status-->
		<method name="netStreamHandler" args="event">
			switch (event.info.code) {
				case "NetStream.Publish.Start":
	                Debug.write("Stream publish started");
	                //broadcasting._attachStream(this.stream1);
	                break;
	            case "NetStream.Failed":
	            	Debug.write("NetStream Failed");
	            	break;
	            case "NetStream.Play.Start":
	            	Debug.write("NetStream playing started");
	            	break;
	            case "NetStream.Play.Stop":
	            	Debug.write("NetStream play stopped");
	            	break;
	            case "NetStream.Play.Failed":
	            	Debug.write("NetStream play failed");
	            	break;
            	case "NetStream.Play.StreamNotFound":
	            	Debug.write("No stream found");
	            	break;
	            case "NetStream.Publish.BadName":
                	Debug.write("Please check the name of the publishing stream" );
                	break;
			}
	    </method>
		
		<method name="errorHandler" args="error">
			Debug.write(error.error);
		</method>
		<!--publishing the stream object-->
		<method name="publishVideo" args="username">
			Debug.info("loginscreen.getUsername () => %w",username);	
			var camera= Camera.getCamera();
			camera.setMode(220, 200, 15);
			camera.setQuality(0,80);
			stream1.attachCamera(camera);
            stream1.publish(username,"live");
            _conn.call("user.sendUsername",responder,username);
		</method>
		<!--playing the stream object on the videoview
			@param username : username which is coming from the login window -->
		<method name="playVideo" args="username">
			//Debug.write("playVideo button clicked");
			var streamToPlay= getOtherUsername(username);
			this.stream2.play(streamToPlay);
	        live._attachStream(stream2);
		</method>
		
		<!--method to determine the usernames which is publishing video-->
		<method name="getOtherUsername" args="myUsername">
			<![CDATA[
			var otherUsername;
			for (var i=0; i<_sharedObject.usernameList.length; i++) {
				if (myUsername!=_sharedObject.usernameList[i]) {
					otherUsername= _sharedObject.usernameList[i];
					Debug.inspect(otherUsername);
					return otherUsername;
				}
			}
			]]>
		</method>
		
		<!--closing the open streams successfully-->
		<method name="closeStream">
			Debug.write("closing the stream");
			stream1.close();
			stream2.close();
			camm.setAttribute("show",false);
		</method>
		
		<method name="writeSharedObject" args="message">
			//Debug.write("sending to the shared object");
			this._sharedObject.send("writeMessage",loginScreen.getUsername(),message);
		</method>
		
		<method name="onResult" args="returnvalue">
			Debug.info("onResult: %w",returnvalue);
		</method>
		<method name="onStatus" args="returnvalue">
			Debug.info("onStatus: %w",returnvalue);
		</method>
		
		<method name="closeConnection">
			_conn.call("deleteUsername",responder,loginScreen.getUsername());
			_conn.close	();	
		</method>
	    
	    <method name="getSharedObjectUser">
	    	return _sharedObjectUserlist;
	    </method>
	    
	</class>	
</library>