<library>
	<include href="sharedObject.lzx" />
	<include href="chatView.lzx"/>
	
	<!--server connection initialization class-->
	<class name="connection" extends="node">
		<!--for swf10 runtime-->
		<switch>
			<when property="$as3">
				<passthrough>
					import flash.net.*;
					import flash.events.*;
				</passthrough>
			</when>
		</switch>			
		
		<attribute name="_conn"/>
		<!--attribute to be sure whether connection is successful-->
		<attribute name="connected" value="false" type="boolean"/> 
		<attribute name="responder" /><!--responder for the server side-->
		
		<method name="connect" args="URL"><![CDATA[
			//creating rtmpconnection and shared object 
			_conn = new NetConnection();
			
			if (URL=="undefined" || URL==null) {
				Debug.error("Check the URL");
			}
			else {
				_conn.connect(URL);
				_conn.client=this;	
			}
			
			//_sharedObject= new lz.sharedObject();
			//_sharedObjectUserlist= new lz.sharedObject();
			/*add the listeners according to the runtime */	
			if ($swf8) {
				Debug.write("swf8 env.");
				_conn.onStatus= function (info) {
					if (info.code=="NetConnection.Connect.Success") {
						Debug.write("The connection attempt succeeded.");
					}
				}
			}			
			
			else {
				Debug.write("swf10 env.");
				_conn.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				_conn.addEventListener(AsyncErrorEvent.ASYNC_ERROR, errorHandler);
			}
		]]></method>
		
		<!--here is handling the flash.Net.NetConnection object and creating the NetStream objects-->
		<method name="netStatusHandler" args="event">
			switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    Debug.write("The connection attempt succeeded.");
                    responder = new Responder(this.onResult, this.onStatus);
                    this.setAttribute("connected",true);
                    //Debug.info("connected ? : %w",this.connected);
                    break;
                 
                case "NetConnection.Connect.Failed":
                	Debug.write("The connection attempt failed.");
                    break;
                
                case "NetConnection.Connect.Closed":
                	Debug.write("Disconnected server application." );
                	this.setAttribute("connected",false);
                	this.closeConnection();
                	break;
                	
                case "NetConnection.Connect.Rejected":
                    Debug.write("The connection attempt did not have permission to access the application.");
                    break;
                case "NetConnection.Connect.AppShutdown":
                	Debug.write("Application is shutting down.." );
                	break;
                	
                }
		</method>
		
		<!--closing the netconnection and shared objects-->
		<method name="closeConnection">
			//_conn.call("deleteUsername",responder,loginScreen.getUsername());
			Debug.info("closing connection");
			//soUsers.clear();
			soChat.close();
			soUsers.close();
			this._conn.close();
		</method>
		
		<!--handler for the errors-->
		<method name="errorHandler" args="error">
			Debug.write(error.error);
		</method>
		
		<method name="onResult" args="returnvalue">
			Debug.write("onResult:" + returnvalue);
		</method>
		
		<method name="onStatus" args="returnvalue">
			Debug.write("onStatus:" + returnvalue);
		</method>
		
		<!--<method name="callRemoteFunction" args="func, obj, params">
			<![CDATA[
	        //Debug.write("*#* call: func, obj, params",func,obj, typeof (params) , params.length);
	        if (params.length != 0) {
	        
	        	//Debug.write("params:",params);
	        	//Debug.write("arguments:",arg);

	        	if (params.length==1){
					this._conn.call(func, obj,params[0]);
			        Debug.info("called function : %w, parameter : %w",func, params[0]);
		        } else if (params.length==2){
		            this._conn.call(func, obj,params[0],params[1]);
		            Debug.info("called function : %w, parameter : %w %w",func, params[0],params[1]);
		        } else if (params.length==3){
		            this._conn.call(func, obj,params[0],params[1],params[2]);
		        } else if (params.length==4 ){
		            this._conn.call(func, obj,params[0],params[1],params[2],params[3]);
		        } 
	           
	        } //else {	   
		      //    Debug.write("this._nc.connected", this.connected);
		      //    this._conn.call(func, obj);
	        //}
		]]>
	    </method> -->
	    
		<!--publishing the stream object-->
		<!--<method name="publishVideo" args="username">
			Debug.info("loginscreen.getUsername () => %w",username);	
			var camera= Camera.getCamera();
			camera.setMode(220, 200, 15);
			camera.setQuality(0,80);
			stream1.attachCamera(camera);
            stream1.publish(username,"live");
            _conn.call("user.sendUsername",responder,username);
		</method>-->
		
		<!--playing the stream object on the videoview
			@param username : username which is coming from the login window -->
		<!--<method name="playVideo" args="username">
			//Debug.write("playVideo button clicked");
			var streamToPlay= getOtherUsername(username);
			this.stream2.play(streamToPlay);
	        live._attachStream(stream2);
		</method>-->
		
		<!--method to determine the usernames which is publishing video-->
		<!--<method name="getOtherUsername" args="myUsername">
			<![CDATA[
			var otherUsername;
			for (var i=0; i<_sharedObject.usernameList.length; i++) {
				if (myUsername!=_sharedObject.usernameList[i]) {
					otherUsername= _sharedObject.usernameList[i];
					Debug.inspect(otherUsername);
					return otherUsername;
				}
			}
			]]>
		</method>-->
		
		<!--closing the open streams successfully-->
		<!--<method name="closeStream">
			Debug.write("closing the stream");
			stream1.close();
			stream2.close();
			camm.setAttribute("show",false);
		</method>-->
		
		<!--<method name="writeSharedObject" args="message">
			//Debug.write("sending to the shared object");
			this._sharedObject.send("writeMessage",loginScreen.getUsername(),message);
		</method>
		
		<method name="onResult" args="returnvalue">
			Debug.info("onResult: %w",returnvalue);
		</method>
		<method name="onStatus" args="returnvalue">
			Debug.info("onStatus: %w",returnvalue);
		</method>
	    
	    <method name="getSharedObjectUser">
	    	return _sharedObjectUserlist;
	    </method> -->
	    
	</class>	
</library>